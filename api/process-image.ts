import { VercelRequest, VercelResponse } from '@vercel/node';















import { createWorker, WorkerOptions } from 'tesseract.js';















import { summarizeText } from './scrape'; // This import should now work correctly































export const config = {















  api: {















    bodyParser: false,















  },.













};































export default async function handler(req: VercelRequest, res: VercelResponse) {















  if (req.method !== 'POST') {















    return res.status(405).json({ error: 'Method Not Allowed' });















  }































  try {
    const { fields, files } = await new Promise((resolve, reject) => {
      const form = new (require('formidable').IncomingForm)();
      form.parse(req, (err, fields, files) => {
        if (err) return reject(err);
        resolve({ fields, files });
      });
    });

    const file = files.file;
    if (!file) {
      return res.status(400).json({ error: 'No file provided' });
    }

    const workerOptions: WorkerOptions = {
      logger: m => console.log(m)
    };
    const worker = await createWorker(workerOptions);
    await worker.loadLanguage('eng');
    await worker.initialize('eng');
    const { data: { text } } = await worker.recognize(file.path);
    await worker.terminate();

    const email = fields.email as string;
    const questionCount = parseInt(fields.questionCount as string, 10);
    const difficulty = fields.difficulty as string;
    const questionType = fields.questionType as string;

    const summarizedText = await summarizeText(text, questionCount, difficulty, questionType);

    res.status(200).json({ summarizedText });
  } catch (error: any) {
    console.error('Error processing image:', error.message);
    res.status(500).json({ error: 'Failed to process image' });
  }
}






































